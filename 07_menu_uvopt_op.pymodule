#import treathing
from PIL import Image
import subprocess
import tempfile
import json
import numpy as np
import asyncio


#Operator createOptimizedUV
class UVC_Operator_createOptimizedUV(bpy.types.Operator):
    """ OPERATOR
    Adds a Panel
    """
    bl_idname = "anifanpostuptools.createoptimizeduv"
    bl_label = "Create Optimized UV"
    
    def execute(self, context):
        createOptimizedUV (self, context)
        return {'FINISHED'}
    
async def run_script(script_path, args, image, targetimage, width_img, height_img):
    process = await asyncio.create_subprocess_exec('python', script_path, *args,
                                                   stdout=asyncio.subprocess.PIPE,
                                                   stderr=asyncio.subprocess.PIPE)

    stdout, stderr = await process.communicate()

    if stderr:
        print("Error:", stderr.decode())

    process_completed_process(stdout.decode(), image, targetimage, width_img, height_img)


def createOptimizedUV(self, context):
    
    # Get the directory of the current script
    current_dir = os.path.dirname(os.path.realpath(__file__))

    # Paths for scripts
    script_path_average = os.path.join(current_dir, '07_subprocess_uv_average.pysub')
    script_path_gradient = os.path.join(current_dir, '07_subprocess_uv_gradient.pysub')
    script_path_lines = os.path.join(current_dir, '07_subprocess_uv_lines.pysub')
    script_path_details = os.path.join(current_dir, '07_subprocess_uv_details.pysub')
    script_path_edges = os.path.join(current_dir, '07_subprocess_uv_edges.pysub')
    script_path_orientation = os.path.join(current_dir, '07_subprocess_uv_orientation.pysub')
    script_path_text = os.path.join(current_dir, '07_subprocess_uv_text.pysub')
    
    # Path to the output file to the addons filder
    output_path =  os.path.join(current_dir, 'output.txt')

    # Select the objects you want to rename
    selected_objects = bpy.context.selected_objects
    for obj in selected_objects:
        #cache the old uv in a list of Islands
        uvIslands = []  
        for uv in obj.data.uv_layers.active.data:
            uvIslands.append(uv.uv)
            
        #add new uv called "Optimized" if not exists
        if not "Optimized" in obj.data.uv_layers:
            obj.data.uv_layers.new(name="Optimized")
            
        #set the new uv to active
        obj.data.uv_layers.active = obj.data.uv_layers["Optimized"]
        
        largestSize = (0, 0)
        
        
        #get all images that are used in the materials of the object
        images = []
        for slot in obj.material_slots:
            if slot.material:
                for node in slot.material.node_tree.nodes:
                    if node.type == "TEX_IMAGE":
                        if (node.image):
                            images.append(node.image)
                            if node.image.size[0] > largestSize[0]:
                                largestSize = (node.image.size[0], largestSize[1])
                                
                            if node.image.size[1] > largestSize[1]:
                                largestSize = (largestSize[0], node.image.size[1])
                        
        #Create dicts for images, uvIslands and pixels parented to each other
        uvdict = {}
        width = largestSize[0]
        height = largestSize[1]

        #create array of image data with the length of the amount of images
        image_data_list = []

        # Iterate all images
        for index, image_loop in enumerate(images):
            print("starting image: " + image_loop.name)
            #scale image to 1024x1024
            
            
            print("creating dummy image...")
            #create 1024x1024 image
            image =bpy.data.images.new(image_loop.name+"_1024", width=1024, height=1024)
            
            print("creating thumbnail using PIL...")
            #loading blender iamge to PIL
            image_pil = Image.open(image_loop.filepath)
            
            print("resizing image...")
            #resize image to 1024x1024
            image_pil.thumbnail((1024, 1024))
            
        
            
            print("converting to RGBA...")
            #add alpha if not exists
            #check pixelcount
            if len(list(image_pil.getdata())) == width * height * 3:
                #add alpha channel using numpy
                imageArray = np.insert(np.array(image_pil), 3, 255, axis=1)
            
            print("converting to numpy array...")
            #convert to numpy array
            imageArray = np.array(image_pil)
            
            print("flattening array...")
            #flatten the array
            imageArray = imageArray.flatten()
            
            print("setting pixels to image...")
            #set the pixels to the image
            image.pixels = imageArray
            
            print("staring image processing...")
            
            
            #create non blender array of image pixel data
            #check if image is rgb or rgba by pixelcount
            if len(list(image.pixels)) == width * height * 4:
                imageArray = list(image.pixels)
            else:
                print ("!!!resizing image to 4 channels internally!!!")
                #convert to numpy
                imageArray = list(image.pixels)
                numpyarray = np.array(imageArray)
                
                #reshape to 2d array with 3 channels
                numpy2dchannneled = numpyarray.reshape(-1, 3)
                
                #insert alpha channel
                numpy2dchannneled = np.insert(numpy2dchannneled, 3, 1, axis=1)
                
                #convert back to list using flatten
                imageArray = numpy2dchannneled.flatten()
                
            #debug pixelcount
            print ("pixelcount after reshaping?: " + str(len(imageArray)))
                
                

                
                
            imageArray = list(image.pixels)
            
            imageAverage= createOrReturnImage(image.name+"_"+"Average", width, height)
            imageGradient= createOrReturnImage(image.name+"_"+"Gradient", width, height)
            imageLines= createOrReturnImage(image.name+"_"+"Lines", width, height)
            imageDetails= createOrReturnImage(image.name+"_"+"Details", width, height)
            imageEdges= createOrReturnImage(image.name+"_"+"Edges", width, height)
            imageOrientation= createOrReturnImage(image.name+"_"+"Orientation", width, height)
            imageText= createOrReturnImage(image.name+"_"+"Text", width, height)
            
            
            
            
            #IMAGE AVERAGE OPERATION ===============================================
            pixels = imageArray
            width_img = width
            height_img = height
            #results = p.map(process_section_average, [(section, pixels) for section in sections])
            
            #debug image
            print ("image: " + image.name)
            print ("width: " + str(width_img))
            print ("height: " + str(height_img))
            
            
            #average_pixels = process_average(pixels, width_img, height_img)   
            #create sub process of python file "07_subprocess_uv_average.pysub 
            
            #continue if theres no pixel
            if pixels == "": 
                continue
            
            #continue if pixels is null
            if pixels == None:
                continue
            
            # Convert the pixels to a JSON string
            pixels_json = json.dumps(pixels)

            # Create a temporary file and write the pixels to it
            with tempfile.NamedTemporaryFile(delete=False) as temp:
                temp.write(pixels_json.encode())
                temp_file_name = temp.name

            # Pass the name of the temporary file as an argument
            args = [temp_file_name, str(width_img), str(height_img)]
            
            # Define the scripts and target images
            scripts_and_images = [
                (script_path_average, imageAverage),
                (script_path_gradient, imageGradient),
                (script_path_lines, imageLines),
                (script_path_details, imageDetails),
                (script_path_edges, imageEdges),
                (script_path_orientation, imageOrientation),
                (script_path_text, imageText)
            ]

                        
            # Prepare the commands to run the scripts
            commands = [['python', script_path] + args for script_path, _ in scripts_and_images]

            # Start each command
            #procs = [subprocess.run(i, stdout=subprocess.PIPE, stderr=subprocess.PIPE, creationflags=subprocess.CREATE_NEW_CONSOLE) for i in commands]
            '''
            # Wait for each command to complete and process its output
            for p, (_, targetimage) in zip(procs, scripts_and_images):
                stdout, _ = p.communicate()
                process_completed_process(stdout.decode(), image, targetimage, width_img, height_img)
                #wait
            '''
            #'''
            print ("Starting average image")
            completed_process = subprocess.run(['python', script_path_average] + args, text=True, capture_output=True, creationflags=subprocess.CREATE_NEW_CONSOLE)  
            #save the result of the subprocess so it doesnt get lost
            completed_process_stdout = completed_process.stdout
            error_process = completed_process.stderr
            print ("error: "+error_process)
            process_completed_process(completed_process_stdout, image, imageAverage, width_img, height_img)
            print ("Average image done")
            
            print ( "Starting gradient image")    
            completed_process = subprocess.run(['python', script_path_gradient] + args, text=True, capture_output=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
            completed_process_stdout = completed_process.stdout
            error_process = completed_process.stderr
            print ("error: "+error_process)
            process_completed_process(completed_process_stdout, image, imageGradient, width_img, height_img)
            print ("Gradient image done")
            
            print ("Starting lines image")
            completed_process = subprocess.run(['python', script_path_lines] + args, text=True, capture_output=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
            completed_process_stdout = completed_process.stdout
            error_process = completed_process.stderr
            print ("error: "+error_process)
            process_completed_process(completed_process_stdout, image, imageLines, width_img, height_img)
            print ("Lines image done")
               
            print ("Starting details image")
            completed_process = subprocess.run(['python', script_path_details] + args, text=True, capture_output=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
            completed_process_stdout = completed_process.stdout
            error_process = completed_process.stderr
            print ("error: "+error_process)
            process_completed_process(completed_process_stdout, image, imageDetails, width_img, height_img)    
            print ( "Details image done")
            
            print ("Starting edges image")
            completed_process = subprocess.run(['python', script_path_edges] + args, text=True, capture_output=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
            completed_process_stdout = completed_process.stdout
            error_process = completed_process.stderr
            print ("error: "+error_process)
            process_completed_process(completed_process_stdout, image, imageEdges, width_img, height_img)
            print ("Edges image done")

            
            print("Starting orientation image")
            completed_process = subprocess.run(['python', script_path_orientation] + args, text=True, capture_output=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
            completed_process_stdout = completed_process.stdout
            error_process = completed_process.stderr
            print ("error: "+error_process)
            process_completed_process(completed_process_stdout, image, imageOrientation, width_img, height_img)
            print("Orientation image done")
            
            print("Starting text image") 
            completed_process = subprocess.run(['python', script_path_text] + args, text=True, capture_output=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
            completed_process_stdout = completed_process.stdout
            error_process = completed_process.stderr
            print ("error: "+error_process)
            process_completed_process(completed_process_stdout, image, imageText, width_img, height_img)   
            print("Text image done")         
            #'''      
            
            
            
            
            
            #IMAGE AVERAGE DONE =======================================================
            image_data = ImageData(image, imageAverage, imageGradient, imageLines, imageDetails, imageEdges, imageOrientation, imageText)
            image_data_list.append(image_data)
            
            # Iterate all islands
        for i, uv in enumerate(uvIslands):
            print("Island: " + str(i))
            

def run_process(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if stderr:
        print(f"Error: {stderr.decode()}")
    return stdout.decode()

       
def writeImagePixels(image, pixels):
    #check size and resize if needed
    if len(pixels) != image.size[0] * image.size[1] * 4:
        image.scale(image.size[0], image.size[1])
    image.pixels = pixels
    return image

def createImageFromPixels(pixels, width, height, name):
    # Create a new image
    image = createOrReturnImage(name, width, height)
    # Set the pixels
    image.pixels = pixels
    return image

def readImagePixel_INT(imageArray, x, y, width, height):
    # Get the pixel index
    pixelIndex = img_getImagePixelIndex(x, y, width)

    return (imageArray[pixelIndex+0], imageArray[pixelIndex+1], imageArray[pixelIndex+2], imageArray[pixelIndex+3])

def createOrReturnImage (name, width, height):
    if name in bpy.data.images:
        return bpy.data.images[name]
    else: 
        return bpy.data.images.new(name, width=width, height=height, )   

                        
                        
def getpixelgrayscaled(pixel):
    return int (pixel[0] + pixel[1] + pixel[2]) / 3

def img_getImagePixelIndex(xt, yt, imagewidth):

    
    return (yt * imagewidth + xt)*4    

def unpackImageArray_np(imageArray, width, height):
    y_indices, x_indices = np.indices((height, width))
    unpacked = [readImagePixel_INT(imageArray, x, y, width, height) for y, x in zip(y_indices.flatten(), x_indices.flatten())]
    return unpacked

def process_completed_process(completed_process, sourceimage, targetimage, width_img, height_img):
    pixellist_data = completed_process

    if pixellist_data == "":
        print("nodata")
        return
    
    print("loading json data...")
    pixellist_data = json.loads(pixellist_data)

    #print first 30 lines
    #print (pixellist_data[:4])
    
    average_pixels=[]
      
    print("converting to numpy array...")    
    pixellist_data_np = np.array(pixellist_data)

    print("Flatten and correcting array")
    # Flatten the array and filter out non-float values
    #average_pixels = pixellist_data_np.ravel()[np.isreal(pixellist_data_np.ravel())]
    #flat the array 
    average_pixels = pixellist_data_np.flatten()
    
    #convert to list
    print("Converting to List...")
    average_pixels = average_pixels.tolist()
    
    print("Writing Image...")
    newimage= createImageFromPixels(average_pixels, int (width_img), int (height_img), sourceimage.name+"_"+targetimage.name)
    #writeImagePixels(targetimage, .pixels)
    

                           
#Create class that stored the images average, orientation, straigthness, text and gradient
class ImageData:
    def __init__(self, mainimage, imageAverage, imageGradient, imageLines, imageDetails, imageEdges, imageOrientation, imageText):
        self.mainimage = mainimage
        self.imageAverage = imageAverage
        self.imageGradient = imageGradient
        self.imageLines = imageLines
        self.imageDetails = imageDetails
        self.imageEdges = imageEdges
        self.imageOrientation = imageOrientation
        self.imageText = imageText
        
class IslandData:
    def __init__(self,  averagestrength, gradientstrength, gradientdirection, linestrength, linedirection, detailsstrength, edgesstrength, colortype):
        self.averagestrength=averagestrength      
        self.gradientstrength=gradientstrength       
        self.gradientdirection=gradientdirection
        self.linestrength=linestrength
        self.linedirection=linedirection
        self.detailsstrength=detailsstrength
        self.edgesstrength=edgesstrength
        self.colortype=colortype
              
def getPixelsOfIsland(self, image):
    #get the pixels of the island
    pixels = []
    for uv in self.uvIslands:
        x = int(uv[0] * image.size[0])
        y = int(uv[1] * image.size[1])
        pixel = image.pixels[img_getImagePixelIndex(x, y, image.size[0])]
        pixels.append(pixel)
    return pixels

def calculate_average_strength(self, pixels):
    #calculate the average strength of the island
    average = 0
    for pixel in pixels:
        average += getpixelgrayscaled(pixel)
    return average / len(pixels)

def calculate_gradient_strength(self, pixels):
    #calculate the gradient strength of the island
    gradient = 0
    for i in range(len(pixels) - 1):
        gradient += abs(getpixelgrayscaled(pixels[i]) - getpixelgrayscaled(pixels[i + 1]))
    return gradient / len(pixels)

def calculate_gradient_direction(self, pixels):
    #calculate the gradient direction of the island
    gradient = 0
    for i in range(len(pixels) - 1):
        gradient += abs(getpixelgrayscaled(pixels[i]) - getpixelgrayscaled(pixels[i + 1]))
    return gradient / len(pixels)

def calculate_line_strength(self, pixels):
    #calculate the line strength of the island
    line = 0
    for i in range(len(pixels) - 1):
        line += abs(getpixelgrayscaled(pixels[i]) - getpixelgrayscaled(pixels[i + 1]))
    return line / len(pixels)

def calculate_line_direction(self, pixels):
    #calculate the line direction of the island
    line = 0
    for i in range(len(pixels) - 1):
        line += abs(getpixelgrayscaled(pixels[i]) - getpixelgrayscaled(pixels[i + 1]))
    return line / len(pixels)

def calculate_details_strength(self, pixels):
    #calculate the details strength of the island
    details = 0
    for i in range(len(pixels) - 1):
        details += abs(getpixelgrayscaled(pixels[i]) - getpixelgrayscaled(pixels[i + 1]))
    return details / len(pixels)

def calculate_edges_strength(self, pixels):
    #calculate the edges strength of the island
    edges = 0
    for i in range(len(pixels) - 1):
        edges += abs(getpixelgrayscaled(pixels[i]) - getpixelgrayscaled(pixels[i + 1]))
    return edges / len(pixels)

def calculate_color_type(self, pixels):
    #calculate the color type of the island
    color = 0
    for i in range(len(pixels) - 1):
        color += abs(getpixelgrayscaled(pixels[i]) - getpixelgrayscaled(pixels[i + 1]))
    return color / len(pixels)

        

                     
#!!! this section is moved to the subprocess file !!!

    


    

    

                    

                    