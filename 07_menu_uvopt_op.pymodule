#Operator createOptimizedUV
class UVC_Operator_createOptimizedUV(bpy.types.Operator):
    """ OPERATOR
    Adds a Panel
    """
    bl_idname = "anifanpostuptools.createoptimizeduv"
    bl_label = "Create Optimized UV"
    
    def execute(self, context):
        bpy.ops.ed.undo_push(message="Create Optimized UV")
        createOptimizedUV(self, context)
        return {'FINISHED'}


def createOptimizedUV(self, context):
    # Get active Objects
    selected_Objects = bpy.context.selected_objects

    # Select the objects you want to rename
    selected_objects = bpy.context.selected_objects
    for obj in selected_objects:
        #cache the old uv in a list of Islands
        uvIslands = []
        for uv in obj.data.uv_layers.active.data:
            uvIslands.append(uv.uv)
            
        #add new uv called "Optimized" if not exists
        if not "Optimized" in obj.data.uv_layers:
            obj.data.uv_layers.new(name="Optimized")
            
        #set the new uv to active
        obj.data.uv_layers.active = obj.data.uv_layers["Optimized"]
        
        #get all images that are used in the materials of the object
        images = []
        for slot in obj.material_slots:
            if slot.material:
                for node in slot.material.node_tree.nodes:
                    if node.type == "TEX_IMAGE":
                        images.append(node.image)
                        
        #Create dicts for images, uvIslands and pixels parented to each other
        uvdict = {}
       
       
        #convert pixels into 2 dimensional array make sure the array has the same pixel position as the uvs
        pixels = []
        # Get the size of one dimension (assuming the image is a square)
        size = int(np.sqrt(len(image.pixels)))

        # Convert pixels into 2 dimensional array
        pixels = np.array(image.pixels).reshape(size, size)
                    
                        
                        
        # Iterate all islands
        for i, uv in enumerate(uvIslands):
            imageDict = {}
            # Iterate all images
            for image in images:
                uvIslandDict = {}
                #iterate faces of the island
             
                #iterate x and y of the pixels
                for x in range(size):
                    for y in range(size):
                        pixelDict = {
                            'top': 0,
                            'bottom': 0,
                            'left': 0,
                            'right': 0,
                            
                            #average difference of the top, bottom, left and right pixel
                            'average': 0,
                            
                            #3D vector
                            'orientation': (0, 0),
                            'straigthness': 0
                            
                        }
                        pixel = pixels[x][y]
                       
                        #add the difference to the top , bottom , left and right pixel to a variable      
                        top =  pixel - pixels[x][y+1] 
                        bottom =  pixel - pixels[x][y-1]
                        left =  pixel - pixels[x-1][y]
                        right =  pixel - pixels[x+1][y]
                                   
                        difference = top + bottom + left + right
                        difference = difference / 4
                        
                        #calculate a 2d vector into the direction with the highest difference uusing math
                        orientation = (top - bottom, left - right)
                        #normalize
                        orientation = orientation / np.linalg.norm(orientation)
                        
                        straigthness = abs(pixel['orientation'][0] - 0.5) + abs(pixel['orientation'][1] - 0.5)
                        
                        #add the differences to the pixelDict
                        pixelDict['top'] = top
                        pixelDict['bottom'] = bottom
                        pixelDict['left'] = left
                        pixelDict['right'] = right
                        
                        #add the average difference to the pixelDict
                        pixelDict['average'] = difference
                        
                        #add the orientation to the pixelDict
                        pixelDict['orientation'] = orientation
                        
                        # Add the straigthness to the pixelDict
                        pixelDict['straigthness'] = straigthness
                                           
                        pixelDict['p'+ str(x) +"/"+ str(y)] = pixelDict
                        # Add the pixelDict to the uvIslandDict
                        uvIslandDict['pixel'] = pixelDict
                        
                        
                        
                    #cacululate the average orientation of all pixels 
                    averageOrientation = (0, 0)
                    straigthness=0
                    mindifference=0
                    maxdifference=0
                    
                    for pixel in uvIslandDict['pixel']:
                        averageOrientation += pixel['orientation']
                        
                        #calculate how much the vectors are straight to left or right or top or bottom
                        #substract them to get how much the vectors are, the closer to 0.5 the less straight they are
                        
                        
                        
                        
                    
                    # Add the uvIslandDict to the imageDict
                imageDict['uvIslandDict'] = uvIslandDict
            # Add the imageDict to the uvdict using update
            uvdict.update(imageDict)
                   

                    