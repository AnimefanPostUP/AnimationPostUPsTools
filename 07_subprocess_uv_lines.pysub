#imports
import argparse
import os
import sys
import json
import concurrent.futures
import numpy as np
import cv2

global debugmessages

def process_lines(pixels, width, height):
    results = []
    sections = []
    
    print("Process Lines", file=sys.stderr)
    # Reshape the pixel data into a 2D array
    image = (np.array(pixels) * 255).reshape(height, width, 4).astype(np.uint8)
    
    # Create a blank image of the same size
    blank_image = np.zeros((height, width, 4), np.uint8)
    
    black_image = np.zeros((height, width, 4), np.uint8)
    line_image = np.zeros((height, width, 4), np.uint8)
    
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply edge detection
    edges = cv2.Canny(gray, 50, 150)

    # Apply Hough Line Transform
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 2, minLineLength=4, maxLineGap=2)

    
    if lines is not None:
    # Draw the lines on the blank image
        for line in lines:
            x1, y1, x2, y2 = line[0]
            
            
            #set red and blue based on line direction, red for vertical, blue for horizontal
            
            # Calculate the angle of the line
            angle = np.arctan2(y2 - y1, x2 - x1) * 180.0 / np.pi

            # Normalize the angle to the range [0, 180)
            angle = angle % 180

            # Interpolate the color between red and blue based on the angle
            red = int(255 * abs(angle - 90) / 90)
            blue = 255 - red
            
            cv2.line(blank_image, (x1, y1), (x2, y2), (red, 0, blue), 10)
            blank_image = cv2.GaussianBlur(blank_image, (9, 9), 1)
            #draw the line
            cv2.line(line_image, (x1, y1), (x2, y2), (0, 255, 0), 1)
            
            #blur red and blue channels
            
            #overlay line_image over blank_image
        
        blank_image = cv2.addWeighted(blank_image, 0.8, line_image, 1, 0)
           

                        
                        
            
             
                
            
            
            
            
    #implement other line detection algorithms here
    

        
    #ED
    returnimage=blank_image

    #convert image to numpy array
    results1d = returnimage.flatten().tolist()
    
    numpyarray = np.array(results1d)

    numpyarray = numpyarray /255
    
    #make every 4th value 1
    numpyarray[3::4] = 1
    
    #group the colors to 4
    results1d = numpyarray.reshape(-1, 4).tolist()
    
    #convert the numpy array to a list
    
    results=[]
    
    #add result1d content to results without looping
    #results.append(results1d) 

            
    return results1d



def readImagePixel_subprocess_rgba(imageArray, x, y, width, height):
    # Get the pixel index
    pixelIndex = img_getImagePixelIndex_subprocess(x, y, width)

    return (imageArray[pixelIndex+0], imageArray[pixelIndex+1], imageArray[pixelIndex+2], imageArray[pixelIndex+3])


def getpixelgrayscaled_subprocess(pixel):
    return int (pixel[0] + pixel[1] + pixel[2]) / 3
        

def img_getImagePixelIndex_subprocess(xt, yt, imagewidth):

    
    return (yt * imagewidth + xt)*4    


def main():
    
    global debugmessages
    debugmessages = ""
    
    # Get the directory of the current script
    current_dir = os.path.dirname(os.path.realpath(__file__))

    # Path to the output file to the addons filder
    output_path =  os.path.join(current_dir, 'output.txt')
    
    # Create an ArgumentParser object
    parser = argparse.ArgumentParser(description='Process some integers.')
    
    # Add the arguments
    parser.add_argument('filepath', type=str, help='The path to the file')
    parser.add_argument('width', type=int, help='The width of the image')
    parser.add_argument('height', type=int, help='The height of the image')

    with open(sys.argv[1], 'r') as temp:
        pixels= json.load(temp)
        width = int(sys.argv[2])
        height = int(sys.argv[3])
        
        #printdebug(len(pixels))

        # Parse the arguments
        args = parser.parse_args()

        # Call your function with the arguments
        result = process_lines(pixels, args.width, args.height)
        #print as dict containing the debug messages and the result
        print(result)
        
        
    with open(output_path, 'w') as f:
        f.write(debugmessages)


# Call the main function when the script is run
if __name__ == '__main__':
    main()
